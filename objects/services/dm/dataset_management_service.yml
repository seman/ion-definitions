name: dataset_management

docstring: |
   The Dataset Management Service provides the services to register and manipulate changeable data sets and their
   metadata within the Integrated Observatory

spec: https://confluence.oceanobservatories.org/display/syseng/CIAD+DM+OV+Dataset+Management+Service

dependencies: [resource_registry]

methods:

#--------

  create_dataset:
    in:
      name:                    ""
      datastore_name:          ""
      view_name:               ""
      stream_id:               ""
      parameter_dict:          {}
      spatial_domain:          {}
      temporal_domain:         {}
      parameter_dictionary_id: ""
      description:             ""
      parent_dataset_id:       ""
    out:
      dataset_id:              ""

  update_dataset:
    in:
      dataset: !Dataset
    out:

  read_dataset:
    docstring: |
     Read the dataset resource including metadata
    in:
      dataset_id: ""
    out:
      dataset: !Dataset
    throws:
      NotFound: if ingestion configuration did not exist

  delete_dataset:
    in:
      dataset_id: ""
    out:
    throws:
      NotFound: if ingestion configuration did not exist

  register_dataset:
    docstring: |
      Registers a dataset with PyDAP
    in: 
      data_product_id: ""
    out:
    throws:
      NotFound: if dataset does not exist
#--------

  add_parameter_to_dataset:
    docstring: Adds a parameter to a dataset
    in:
      parameter_context_id: ""
      dataset_id: ""
    out:
      success: True

#--------

  add_stream:
    docstring: Adds a stream to a dataset
    in:
      dataset_id: ""
      stream_id: ""
    out:
      success: True
    
  remove_stream:
    docstring: Adds a stream to a dataset
    in:
      dataset_id: ""
      stream_id: ""
    out:
      success: True

#--------
      
  get_dataset_info:
    docstring: |
      Retrieves metadata information about a particular dataset
    in:
      dataset_id: ""
    out:
      information: ""

  get_dataset_parameters:
    docstring: |
      Retrieves a list of parameters in a particular dataset
    in:
      dataset_id: ""
    out:
      parameter_dictionary: {}

  get_dataset_length:
    docstring: |
      Retrieves the length of a particular dataset
    in:
      dataset_id: ""
    out:
      length: 0

#--------

  create_parameter_context:
    docstring: |
      Creates a new parameter context resource. The context defines the parameter in a dataset. This method
      accepts a dumped ParameterContext instance as its argument.
      https://confluence.oceanobservatories.org/display/CIDev/Defining+Parameter+Dictionaries+and+Contexts
    in:
      name: ""
      parameter_context: {}
      description: ""
      reference_urls: []
      parameter_type: ""
      internal_name: ""
      value_encoding: ""
      code_report: ""
      units: ""
      fill_value: ""
      display_name: ""
      parameter_function_id: ""
      parameter_function_map: ""
      standard_name: ""
      ooi_short_name: ""
      precision: ""
      visible: True
    out:
      parameter_context_id: ""

  read_parameter_context:
    docstring: |
      Reads the parameter context resource object from the registry
    in:
      parameter_context_id: ""
    out:
      parameter_context: {}

  delete_parameter_context:
    docstring: |
      Deletes a particular parameter context resource object.
    in:
      parameter_context_id: ""
    out:
      success: True

  create_parameter:
    docstring: |
      Creates a parameter context using an IonObject
    in:
      parameter_context: !ParameterContext
    out:
      parameter_context_id: ""

#--------

  read_parameter_context_by_name:
    docstring: |
      Retrieves a parameter context resource using the name as a lookup key.
    in:
      name: ""
      id_only: False
    out:
      parameter_context: {}

#--------

  create_parameter_function:
    docstring: |
      Creates a new parameter function resource.
    in:
      parameter_function: !ParameterFunction
    out:
      parameter_function_id: ""

  read_parameter_function:
    docstring: |
      Reads a parameter function resource from the registry.
    in:
      parameter_function_id: ""
    out:
      parameter_function: {}

  delete_parameter_function: 
    docstring: |
      Deletes a parameter function resource from the registry.
    in:
      parameter_function_id: ""
    out:
      success: True

#--------

  load_parameter_function:
    docstring: |
      Creates a parameter function and data process definition resource from a preload row.
    in:
      row: {} # A row from the preload spreadsheet
    out:
      parameter_function_id: ""

#--------

  read_parameter_function_by_name:
    docstring: |
      Reads a parameter function resource from the registry using the name as a lookup.
    in:
      name: ""
      id_only: False
    out:
      parameter_function: {}

#--------

  create_parameter_dictionary:
    docstring: |
      Creates a container for a set of parameter contexts known as a parameter dictionary.
      Parameter dictionaries define the parameters of a particular dataset.
    in:
      name: ""
      parameter_context_ids: []
      temporal_context: ""
      description: ""
    out:
      parameter_dictionary_id: ""
      
  read_parameter_dictionary:
    docstring: | 
      Reads a particular parameter dictionary from the resource registry.
    in:
      parameter_dictionary_id: ""
    out:
      parameter_dictionary: {}

  delete_parameter_dictionary:
    docstring: |
      Removes a particular parameter dictionary from the resource registry.
    in:
      parameter_dictionary_id: ""
    out:
      success: True


#--------

  create_parameters_mult:
    docstring: |
      Creates multiple parameter function, parameter context and parameter dictionary resources.
    in:
      parameter_function_list: []
      parameter_context_list: []
      parameter_dictionary_list: []
      parameter_dictionary_assocs: {}
    out:
      resource_ids: {}

#--------
      
  read_parameter_contexts:
    docstring: |
      Retrieves a list of parameter contexts for a given parameter dictionary.
    in:
      parameter_dictionary_id: ""
      id_only: False
    out:
      parameter_contexts: []
      
  read_parameter_dictionary_by_name:
    docstring: |
      Retrieves a parameter dictionary resource from the resource registry using the name as a lookup key.
    in:
      name: ""
      id_only: False
    out:
      parameter_dictionary: {}

#--------

  dataset_temporal_bounds:
    docstring: |
      Retrieves the temporal bounds in system time for a particular dataset.
    in:
      dataset_id: ""
    out:
      bounds: {}

  dataset_bounds:
    docstring: |
      Returns the bounds (min, max) for the parameter(s) indicated by <i>parameter_name</i>
      If <i>parameter_name</i> is None, all parameters in the coverage are included
      If more than one parameter is indicated by <i>parameter_name</i>, a dict of {key:(min,max)} is returned;
      otherwise, only the (min, max) tuple is returned
      @param dataset_id       Identifier string for dataset
      @param parameter_name   A string parameter name; may be an iterable of such members
    in:
      dataset_id: ""
      parameters: []
    out: 
      bounds: {}

  dataset_bounds_by_axis:
    docstring: |
      Returns the bounds (min, max) for the coordinate parameter(s) indicated by <i>axis</i>
      If <i>axis</i> is None, all coordinate parameters are included
      If more than one parameter is indicated by <i>axis</i>, a dict of {key:(min,max)} is returned;
      otherwise, only the (min, max) tuple is returned
      @param dataset_id  Identifier string for dataset
      @param axis        A member of AxisTypeEnum; may be an iterable of such members
    in:
      dataset_id: ""
      axis: 0
    out: 
      bounds: {}

  dataset_extents:
    docstring: |
      Returns the extents (dim_0,dim_1,...,dim_n) for the parameter(s) indicated by <i>parameter_name</i>
      If <i>parameter_name</i> is None, all parameters in the coverage are included
      If more than one parameter is indicated by <i>parameter_name</i>, a dict of {key:(dim_0,dim_1,...,dim_n)} is returned;
      otherwise, only the (dim_0,dim_1,...,dim_n) tuple is returned
      @param dataset_id       Identifier string for dataset
      @param parameter_name   A string parameter name; may be an iterable of such members
    in:
      dataset_id: ""
      parameters: []
    out:
      extents: {}

  dataset_extents_by_axis:
    docstring: |
      Returns the extents (dim_0,dim_1,...,dim_n) for the coordinate parameter(s) indicated by <i>axis</i>
      If <i>axis</i> is None, all coordinate parameters are included
      If more than one parameter is indicated by <i>axis</i>, a dict of {key:(dim_0,dim_1,...,dim_n)} is returned;
      otherwise, only the (dim_0,dim_1,...,dim_n) tuple is returned
      @param dataset_id       Identifier string for dataset
      @param axis             A member of AxisTypeEnum; may be an iterable of such members
    in:
      dataset_id: ""
      axis: ""
    out:
      extents: {}

  dataset_size:
    docstring: |
      Returns the size of the dataset in kilobytes, may also return value in bytes.
    in:
      dataset_id: ""
      in_bytes: False
    out:
      size: 0

  dataset_latest:
    docstring: |
      Returns the latest values of the dataset.
    in:
      dataset_id: ""
    out:
      values: {}

#--------
  read_qc_table:
    docstring: |
      Reads an object containing uploaded QC tables from the object store
    in:
      obj_id: ""
    out:
      obj_dictionary: {}

