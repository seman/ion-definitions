name: user_notification

docstring: |
  Provides management of user requests for notification of various events within ION. Also provides access
  to the event capabilities of ION

spec: https://confluence.oceanobservatories.org/display/syseng/CIAD+COI+OV+User+Notification+Service

dependencies: [resource_registry, scheduler, discovery, process_dispatcher]

methods:
  create_notification:
    docstring: |
      Persists the provided NotificationRequest object for the specified Org id. Associate the
      Notification resource with the use. The id string returned
      is the internal id by which NotificationRequest will be identified in the data store.
    in:
      notification: !NotificationRequest
      user_id: ""
    out:
      notification_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute, or if more than one user info exists
      NotFound: if user does not exist, user info does not exist, or user email does not exist

  update_notification:
    docstring: |
      Updates the provided NotificationRequest object.  Throws NotFound exception if
      an existing version of NotificationRequest is not found.  Throws Conflict if
      the provided NotificationRequest object is not based on the latest persisted
      version of the object.
    in:
      notification: !NotificationRequest
      user_id: ''
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: if object with specified id does not exist, or no user found for notification
      Conflict: if object not based on latest persisted object version

  read_notification:
    docstring: |
      Returns the NotificationRequest object for the specified notification id.
      Throws exception if id does not match any persisted NotificationRequest
      objects.
    in:
      notification_id: ""
    out:
      notification: !NotificationRequest
    throws:
      NotFound: if object with specified id does not exist

  delete_notification:
    docstring: |
      For now, permanently deletes NotificationRequest object with the specified
      id. Throws exception if id does not match any persisted NotificationRequest.
    in:
      notification_id: ""
    out:
    throws:
      BadRequest: if more than one user exists for the notification
      NotFound: if object with specified id does not exist, user for notification does not exist, or association does not exist

  get_user_notifications:
    docstring: |
      Returns a list of notifications for a user id
    in:
      user_info_id: ""
    out:
      notification_list: []
    throws:
      NotFound: if object with specified parameters does not exist

  create_worker:
    docstring: |
      Creates notification workers
    in:
      number_of_workers: 1
    out:

  process_batch:
    docstring:  |
      This method is launched when an process_batch event is received. The user info dictionary maintained
      by the User Notification Service is used to query the event repository for all events for a particular
      user that have occurred in a certain time interval (right now the past 24 hours), and then an email
      is sent to the user containing the digest of all the events.

    in:
      start_time: ''
      end_time: ''
    out:

  set_process_batch_key:
    docstring:  |
      This method is used by the operator to set the process_batch_key, a string, that the UNS will listen
      for as the origin of a timer event. When the scheduler publishes a timer event with origin set equal
      to the value of the process_batch_key, the UNS will launch its process_batch() method, resulting
      in an email being sent to the subscribed users with a message body that details all the relevant
      events that have occurred in between timer events.
    in:
      process_batch_key: ""
    out:

  get_subscriptions:
    docstring:  |
      This method is used to get the subscriptions to resource id. The method will return a list of NotificationRequest
      objects for whom the origin is set to this resource id. This way all the users who were interested in listening to
      events with origin equal to this resource id, will be known and all their subscriptions will be known.
      This method takes the user-id as an input parameter. The logic will first find all notification requests for this resource
      then if a user_id is present, it will filter on those that this user is associated with.
    in:
      resource_id: ""
      user_id: ""
      include_nonactive: False
    out:
      notification_requests: []
  
  get_subscriptions_attribute:
    docstring:  |
      This method is used to get the subscriptions to resource id. The method will return a list of NotificationRequest
      objects for whom the origin is set to this resource id. This way all the users who were interested in listening to
      events with origin equal to this resource id, will be known and all their subscriptions will be known.
      This method takes the user-id as an input parameter. The logic will first find all notification requests for this resource
      then if a user_id is present, it will filter on those that this user is associated with.
    in:
      resource_id: ""
      user_id: ""
      include_nonactive: False
    out:
      notification_requests: []

  # -------------------------------------------------------------------------
  # Events operations

  publish_event_object:
    docstring: |
      Publishes an event based on the given event object.
      Returns the published event object with filled out _id and other attributes.
    in:
      event: !Event
    out:
      event: !Event
    throws:
      BadRequest: if there is anything wrong with the event object

  publish_event:
    docstring: |
      Publishes an event of given type based on given basic and additional attributes.
      Returns the published event object with filled out _id and other attributes.
    in:
      event_type: ""
      origin: ""
      origin_type: ""
      sub_type: ""
      description: ""
      event_attrs: {}
    out:
      event: !Event
    throws:
      BadRequest: if there is anything wrong with the event object

  find_events:
    docstring: |
      Returns a list of events that match the specified search criteria.
      Can return a list of EventComputedAttributes if requested with event objects contained.
      Pagination arguments are supported.
    in:
      origin: ""
      type: ""
      min_datetime: ""
      max_datetime: ""
      limit: -1
      descending: False
      skip: 0
      computed: False
    out:
      event_list: []
    throws:
      NotFound: if object with specified parameters does not exist

  get_recent_events:
    docstring: |
      Returns a list of EventComputedAttributes for events that match the resource id as origin,
      in descending order, most recent first. The total number of events is limited by default
      based on system configuration. Pagination arguments are supported.
    in:
      resource_id: ""
      limit: 0
      skip: 0
    out:
      event_list: []
    throws:
      NotFound: if object with specified parameters does not exist
